import { LLMAgentParams, LLMAgentWorker, LLMAgent } from '@llamaindex/core/agent';
import { NonStreamingChatEngineParams, StreamingChatEngineParams } from '@llamaindex/core/chat-engine';
import { EngineResponse } from '@llamaindex/core/schema';
import { Anthropic as Anthropic$1, ClientOptions } from '@anthropic-ai/sdk';
import { BetaCacheControlEphemeral } from '@anthropic-ai/sdk/resources/beta/index';
import { MessageCreateParamsBase, MessageParam, MessageCreateParams, Tool } from '@anthropic-ai/sdk/resources/messages';
import { JSONObject } from '@llamaindex/core/global';
import { ToolCallLLM, ToolCallLLMMessageOptions, ChatMessage, LLMChatParamsStreaming, ChatResponseChunk, LLMChatParamsNonStreaming, ChatResponse, BaseTool } from '@llamaindex/core/llms';

declare class AnthropicSession {
    anthropic: Anthropic$1;
    constructor(options?: ClientOptions);
}
declare const ALL_AVAILABLE_ANTHROPIC_LEGACY_MODELS: {
    "claude-2.1": {
        contextWindow: number;
    };
    "claude-2.0": {
        contextWindow: number;
    };
    "claude-instant-1.2": {
        contextWindow: number;
    };
};
declare const ALL_AVAILABLE_V3_MODELS: {
    "claude-3-opus": {
        contextWindow: number;
    };
    "claude-3-opus-latest": {
        contextWindow: number;
    };
    "claude-3-opus-20240229": {
        contextWindow: number;
    };
    "claude-3-sonnet": {
        contextWindow: number;
    };
    "claude-3-sonnet-20240229": {
        contextWindow: number;
    };
    "claude-3-haiku": {
        contextWindow: number;
    };
    "claude-3-haiku-20240307": {
        contextWindow: number;
    };
};
declare const ALL_AVAILABLE_V3_5_MODELS: {
    "claude-3-5-sonnet": {
        contextWindow: number;
    };
    "claude-3-5-sonnet-20241022": {
        contextWindow: number;
    };
    "claude-3-5-sonnet-20240620": {
        contextWindow: number;
    };
    "claude-3-5-sonnet-latest": {
        contextWindow: number;
    };
    "claude-3-5-haiku": {
        contextWindow: number;
    };
    "claude-3-5-haiku-latest": {
        contextWindow: number;
    };
    "claude-3-5-haiku-20241022": {
        contextWindow: number;
    };
};
declare const ALL_AVAILABLE_V3_7_MODELS: {
    "claude-3-7-sonnet": {
        contextWindow: number;
    };
    "claude-3-7-sonnet-20250219": {
        contextWindow: number;
    };
    "claude-3-7-sonnet-latest": {
        contextWindow: number;
    };
};
declare const ALL_AVAILABLE_ANTHROPIC_MODELS: {
    "claude-3-7-sonnet": {
        contextWindow: number;
    };
    "claude-3-7-sonnet-20250219": {
        contextWindow: number;
    };
    "claude-3-7-sonnet-latest": {
        contextWindow: number;
    };
    "claude-3-5-sonnet": {
        contextWindow: number;
    };
    "claude-3-5-sonnet-20241022": {
        contextWindow: number;
    };
    "claude-3-5-sonnet-20240620": {
        contextWindow: number;
    };
    "claude-3-5-sonnet-latest": {
        contextWindow: number;
    };
    "claude-3-5-haiku": {
        contextWindow: number;
    };
    "claude-3-5-haiku-latest": {
        contextWindow: number;
    };
    "claude-3-5-haiku-20241022": {
        contextWindow: number;
    };
    "claude-3-opus": {
        contextWindow: number;
    };
    "claude-3-opus-latest": {
        contextWindow: number;
    };
    "claude-3-opus-20240229": {
        contextWindow: number;
    };
    "claude-3-sonnet": {
        contextWindow: number;
    };
    "claude-3-sonnet-20240229": {
        contextWindow: number;
    };
    "claude-3-haiku": {
        contextWindow: number;
    };
    "claude-3-haiku-20240307": {
        contextWindow: number;
    };
    "claude-2.1": {
        contextWindow: number;
    };
    "claude-2.0": {
        contextWindow: number;
    };
    "claude-instant-1.2": {
        contextWindow: number;
    };
};
type AnthropicAdditionalChatOptions = Pick<MessageCreateParamsBase, "thinking">;
type AnthropicToolCallLLMMessageOptions = ToolCallLLMMessageOptions & {
    cache_control?: BetaCacheControlEphemeral | null;
    thinking?: string | undefined;
    thinking_signature?: string | undefined;
};
declare class Anthropic extends ToolCallLLM<AnthropicAdditionalChatOptions, AnthropicToolCallLLMMessageOptions> {
    model: keyof typeof ALL_AVAILABLE_ANTHROPIC_MODELS | ({} & string);
    temperature: number;
    topP?: number | undefined;
    maxTokens?: number | undefined;
    additionalChatOptions?: AnthropicAdditionalChatOptions | undefined;
    apiKey?: string | undefined;
    maxRetries: number;
    timeout?: number;
    session: AnthropicSession;
    constructor(init?: Partial<Anthropic>);
    get supportToolCall(): boolean;
    get metadata(): {
        model: "claude-3-7-sonnet-latest" | "claude-3-7-sonnet-20250219" | "claude-3-5-haiku-latest" | "claude-3-5-haiku-20241022" | "claude-3-5-sonnet-latest" | "claude-3-5-sonnet-20241022" | "claude-3-5-sonnet-20240620" | "claude-3-opus-latest" | "claude-3-opus-20240229" | "claude-3-sonnet-20240229" | "claude-3-haiku-20240307" | "claude-2.1" | "claude-2.0" | "claude-3-7-sonnet" | "claude-3-5-sonnet" | "claude-3-5-haiku" | "claude-3-opus" | "claude-3-sonnet" | "claude-3-haiku" | "claude-instant-1.2" | ({} & string);
        temperature: number;
        topP: number;
        maxTokens: number | undefined;
        contextWindow: number;
        tokenizer: undefined;
        structuredOutput: boolean;
    };
    getModelName: (model: string) => string;
    parseToolInput: (input: string | JSONObject) => any;
    formatMessages(messages: ChatMessage<AnthropicToolCallLLMMessageOptions>[]): MessageParam[];
    private prepareToolsForAPI;
    private mergeConsecutiveMessages;
    chat(params: LLMChatParamsStreaming<AnthropicAdditionalChatOptions, AnthropicToolCallLLMMessageOptions>): Promise<AsyncIterable<ChatResponseChunk<AnthropicToolCallLLMMessageOptions>>>;
    chat(params: LLMChatParamsNonStreaming<AnthropicAdditionalChatOptions, AnthropicToolCallLLMMessageOptions>): Promise<ChatResponse<AnthropicToolCallLLMMessageOptions>>;
    protected streamChat(anthropic: Anthropic$1, params: MessageCreateParams): AsyncIterable<ChatResponseChunk<AnthropicToolCallLLMMessageOptions>>;
    static toTool(tool: BaseTool): Tool;
}
/**
 * Convenience function to create a new Anthropic instance.
 * @param init - Optional initialization parameters for the Anthropic instance.
 * @returns A new Anthropic instance.
 */
declare const anthropic: (init?: ConstructorParameters<typeof Anthropic>[0]) => Anthropic;

type AnthropicAgentParams = LLMAgentParams<Anthropic>;
declare class AnthropicAgentWorker extends LLMAgentWorker {
}
declare class AnthropicAgent extends LLMAgent {
    constructor(params: AnthropicAgentParams);
    chat(params: NonStreamingChatEngineParams): Promise<EngineResponse>;
    chat(params: StreamingChatEngineParams): Promise<never>;
}

export { ALL_AVAILABLE_ANTHROPIC_LEGACY_MODELS, ALL_AVAILABLE_ANTHROPIC_MODELS, ALL_AVAILABLE_V3_5_MODELS, ALL_AVAILABLE_V3_7_MODELS, ALL_AVAILABLE_V3_MODELS, Anthropic, type AnthropicAdditionalChatOptions, AnthropicAgent, type AnthropicAgentParams, AnthropicAgentWorker, AnthropicSession, type AnthropicToolCallLLMMessageOptions, anthropic };
