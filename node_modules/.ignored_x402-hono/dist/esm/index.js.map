{"version":3,"sources":["../../src/index.ts"],"sourcesContent":["import type { Context } from \"hono\";\nimport { Address } from \"viem\";\nimport { exact } from \"x402/schemes\";\nimport {\n  computeRoutePatterns,\n  findMatchingRoute,\n  getPaywallHtml,\n  processPriceToAtomicAmount,\n  toJsonSafe,\n} from \"x402/shared\";\nimport {\n  FacilitatorConfig,\n  PaymentPayload,\n  PaymentRequirements,\n  Resource,\n  RoutesConfig,\n} from \"x402/types\";\nimport { useFacilitator } from \"x402/verify\";\n\n/**\n * Enables APIs to be paid for using the x402 payment protocol.\n *\n * This middleware:\n * 1. Validates payment headers and requirements\n * 2. Serves a paywall page for browser requests\n * 3. Returns JSON payment requirements for API requests\n * 4. Verifies and settles payments\n * 5. Sets appropriate response headers\n *\n * @param payToAddress - Address to receive payments\n * @param routes - Route configuration for payment amounts\n * @param facilitator - Configuration for the payment facilitator service\n *\n * @returns A function that creates a Hono middleware handler for a specific payment amount\n *\n * @example\n * ```typescript\n * const middleware = paymentMiddleware(\n *   '0x123...',\n *   {\n *     '/premium/*': {\n *       price: '$0.01',\n *       network: 'base'\n *     }\n *   },\n *   {\n *     url: 'https://facilitator.example.com',\n *     createAuthHeaders: async () => ({\n *       verify: { \"Authorization\": \"Bearer token\" },\n *       settle: { \"Authorization\": \"Bearer token\" }\n *     })\n *   }\n * );\n *\n * app.use('/premium', middleware);\n * ```\n */\nexport function paymentMiddleware(\n  payToAddress: Address,\n  routes: RoutesConfig,\n  facilitator?: FacilitatorConfig,\n) {\n  const { verify, settle } = useFacilitator(facilitator);\n  const x402Version = 1;\n\n  // Pre-compile route patterns to regex and extract verbs\n  const routePatterns = computeRoutePatterns(routes);\n\n  return async function paymentMiddleware(c: Context, next: () => Promise<void>) {\n    const matchingRoute = findMatchingRoute(routePatterns, c.req.path, c.req.method.toUpperCase());\n    if (!matchingRoute) {\n      return next();\n    }\n\n    const { price, network } = matchingRoute.config;\n    const { description, mimeType, maxTimeoutSeconds, outputSchema, customPaywallHtml, resource } =\n      matchingRoute.config.config || {};\n\n    const atomicAmountForAsset = processPriceToAtomicAmount(price, network);\n    if (\"error\" in atomicAmountForAsset) {\n      throw new Error(atomicAmountForAsset.error);\n    }\n    const { maxAmountRequired, asset } = atomicAmountForAsset;\n\n    const resourceUrl: Resource = resource || (c.req.url as Resource);\n\n    const paymentRequirements: PaymentRequirements[] = [\n      {\n        scheme: \"exact\",\n        network,\n        maxAmountRequired,\n        resource: resourceUrl,\n        description: description ?? \"\",\n        mimeType: mimeType ?? \"application/json\",\n        payTo: payToAddress,\n        maxTimeoutSeconds: maxTimeoutSeconds ?? 300,\n        asset: asset?.address ?? \"\",\n        outputSchema,\n        extra: asset?.eip712,\n      },\n    ];\n\n    const payment = c.req.header(\"X-PAYMENT\");\n    const userAgent = c.req.header(\"User-Agent\") || \"\";\n    const acceptHeader = c.req.header(\"Accept\") || \"\";\n    const isWebBrowser = acceptHeader.includes(\"text/html\") && userAgent.includes(\"Mozilla\");\n\n    if (!payment) {\n      if (isWebBrowser) {\n        const displayAmount =\n          typeof price === \"string\" || typeof price === \"number\"\n            ? Number(price)\n            : Number(price.amount) / 10 ** price.asset.decimals;\n        const html =\n          customPaywallHtml ??\n          getPaywallHtml({\n            amount: displayAmount,\n            paymentRequirements: toJsonSafe(paymentRequirements) as Parameters<\n              typeof getPaywallHtml\n            >[0][\"paymentRequirements\"],\n            currentUrl: c.req.path,\n            testnet: network === \"base-sepolia\",\n          });\n        return c.html(html, 402);\n      }\n      return c.json(\n        {\n          error: \"X-PAYMENT header is required\",\n          accepts: paymentRequirements,\n          x402Version,\n        },\n        402,\n      );\n    }\n\n    // Verify payment\n    let decodedPayment: PaymentPayload;\n    try {\n      decodedPayment = exact.evm.decodePayment(payment);\n    } catch (error) {\n      return c.json(\n        {\n          error: error instanceof Error ? error : new Error(\"Invalid or malformed payment header\"),\n          accepts: paymentRequirements,\n          x402Version,\n        },\n        402,\n      );\n    }\n\n    const verification = await verify(decodedPayment, paymentRequirements[0]);\n\n    if (!verification.isValid) {\n      return c.json(\n        {\n          error: new Error(verification.invalidReason),\n          accepts: paymentRequirements,\n          payer: verification.payer,\n          x402Version,\n        },\n        402,\n      );\n    }\n\n    // Proceed with request\n    await next();\n\n    // Settle payment after response\n    try {\n      const settlement = await settle(decodedPayment, paymentRequirements[0]);\n\n      if (settlement.success) {\n        c.header(\n          \"X-PAYMENT-RESPONSE\",\n          JSON.stringify({\n            success: true,\n            transaction: settlement.transaction,\n            network: settlement.network,\n          }),\n        );\n      }\n    } catch (error) {\n      return c.json(\n        {\n          error: error instanceof Error ? error : new Error(\"Failed to settle payment\"),\n          accepts: paymentRequirements,\n          x402Version,\n        },\n        402,\n      );\n    }\n  };\n}\n\nexport type {\n  Money,\n  Network,\n  PaymentMiddlewareConfig,\n  Resource,\n  RouteConfig,\n  RoutesConfig,\n} from \"x402/types\";\n"],"mappings":"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","names":["paymentMiddleware"]}