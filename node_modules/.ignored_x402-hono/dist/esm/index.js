// src/index.ts
import { exact } from "x402/schemes";
import {
  computeRoutePatterns,
  findMatchingRoute,
  getPaywallHtml,
  processPriceToAtomicAmount,
  toJsonSafe
} from "x402/shared";
import { useFacilitator } from "x402/verify";
function paymentMiddleware(payToAddress, routes, facilitator) {
  const { verify, settle } = useFacilitator(facilitator);
  const x402Version = 1;
  const routePatterns = computeRoutePatterns(routes);
  return async function paymentMiddleware2(c, next) {
    const matchingRoute = findMatchingRoute(routePatterns, c.req.path, c.req.method.toUpperCase());
    if (!matchingRoute) {
      return next();
    }
    const { price, network } = matchingRoute.config;
    const { description, mimeType, maxTimeoutSeconds, outputSchema, customPaywallHtml, resource } = matchingRoute.config.config || {};
    const atomicAmountForAsset = processPriceToAtomicAmount(price, network);
    if ("error" in atomicAmountForAsset) {
      throw new Error(atomicAmountForAsset.error);
    }
    const { maxAmountRequired, asset } = atomicAmountForAsset;
    const resourceUrl = resource || c.req.url;
    const paymentRequirements = [
      {
        scheme: "exact",
        network,
        maxAmountRequired,
        resource: resourceUrl,
        description: description ?? "",
        mimeType: mimeType ?? "application/json",
        payTo: payToAddress,
        maxTimeoutSeconds: maxTimeoutSeconds ?? 300,
        asset: (asset == null ? void 0 : asset.address) ?? "",
        outputSchema,
        extra: asset == null ? void 0 : asset.eip712
      }
    ];
    const payment = c.req.header("X-PAYMENT");
    const userAgent = c.req.header("User-Agent") || "";
    const acceptHeader = c.req.header("Accept") || "";
    const isWebBrowser = acceptHeader.includes("text/html") && userAgent.includes("Mozilla");
    if (!payment) {
      if (isWebBrowser) {
        const displayAmount = typeof price === "string" || typeof price === "number" ? Number(price) : Number(price.amount) / 10 ** price.asset.decimals;
        const html = customPaywallHtml ?? getPaywallHtml({
          amount: displayAmount,
          paymentRequirements: toJsonSafe(paymentRequirements),
          currentUrl: c.req.path,
          testnet: network === "base-sepolia"
        });
        return c.html(html, 402);
      }
      return c.json(
        {
          error: "X-PAYMENT header is required",
          accepts: paymentRequirements,
          x402Version
        },
        402
      );
    }
    let decodedPayment;
    try {
      decodedPayment = exact.evm.decodePayment(payment);
    } catch (error) {
      return c.json(
        {
          error: error instanceof Error ? error : new Error("Invalid or malformed payment header"),
          accepts: paymentRequirements,
          x402Version
        },
        402
      );
    }
    const verification = await verify(decodedPayment, paymentRequirements[0]);
    if (!verification.isValid) {
      return c.json(
        {
          error: new Error(verification.invalidReason),
          accepts: paymentRequirements,
          payer: verification.payer,
          x402Version
        },
        402
      );
    }
    await next();
    try {
      const settlement = await settle(decodedPayment, paymentRequirements[0]);
      if (settlement.success) {
        c.header(
          "X-PAYMENT-RESPONSE",
          JSON.stringify({
            success: true,
            transaction: settlement.transaction,
            network: settlement.network
          })
        );
      }
    } catch (error) {
      return c.json(
        {
          error: error instanceof Error ? error : new Error("Failed to settle payment"),
          accepts: paymentRequirements,
          x402Version
        },
        402
      );
    }
  };
}
export {
  paymentMiddleware
};
//# sourceMappingURL=index.js.map