import { S as SignerWallet } from '../wallet-BzWHi3M5.cjs';
import { P as PaymentRequirements, U as UnsignedPaymentPayload } from '../x402Specs-DiRUbZpY.cjs';
import { Address } from 'viem';
import 'viem/chains';
import 'zod';

/**
 * Creates a payment header based on the provided client and payment requirements.
 *
 * @param client - The signer wallet instance used to create the payment header
 * @param x402Version - The version of the X402 protocol to use
 * @param paymentRequirements - The payment requirements containing scheme and network information
 * @returns A promise that resolves to the created payment header string
 */
declare function createPaymentHeader(client: SignerWallet, x402Version: number, paymentRequirements: PaymentRequirements): Promise<string>;

/**
 * Prepares a payment header with the given sender address and payment requirements.
 *
 * @param from - The sender's address from which the payment will be made
 * @param x402Version - The version of the X402 protocol to use
 * @param paymentRequirements - The payment requirements containing scheme and network information
 * @returns An unsigned payment payload that can be used to create a payment header
 */
declare function preparePaymentHeader(from: Address, x402Version: number, paymentRequirements: PaymentRequirements): UnsignedPaymentPayload;

/**
 * Default selector for payment requirements.
 * Default behavior is to select the first payment requirement that has a USDC asset.
 * If no USDC payment requirement is found, the first payment requirement is selected.
 *
 * @param paymentRequirements - The payment requirements to select from.
 * @returns The payment requirement that is the most appropriate for the user.
 */
declare function selectPaymentRequirements(paymentRequirements: PaymentRequirements[]): PaymentRequirements;
/**
 * Selector for payment requirements.
 *
 * @param paymentRequirements - The payment requirements to select from.
 * @returns The payment requirement that is the most appropriate for the user.
 */
type PaymentRequirementsSelector = (paymentRequirements: PaymentRequirements[]) => PaymentRequirements;

/**
 * Signs a payment header using the provided client and payment requirements.
 *
 * @param client - The signer wallet instance used to sign the payment header
 * @param paymentRequirements - The payment requirements containing scheme and network information
 * @param unsignedPaymentHeader - The unsigned payment payload to be signed
 * @returns A promise that resolves to the encoded signed payment header string
 */
declare function signPaymentHeader(client: SignerWallet, paymentRequirements: PaymentRequirements, unsignedPaymentHeader: UnsignedPaymentPayload): Promise<string>;

export { type PaymentRequirementsSelector, createPaymentHeader, preparePaymentHeader, selectPaymentRequirements, signPaymentHeader };
