{"version":3,"sources":["../../src/facilitator/facilitator.ts"],"sourcesContent":["import { verify as verifyExact, settle as settleExact } from \"../schemes/exact/evm\";\nimport { SupportedEVMNetworks } from \"../types/shared\";\nimport { ConnectedClient, SignerWallet } from \"../types/shared/evm\";\nimport {\n  PaymentPayload,\n  PaymentRequirements,\n  SettleResponse,\n  VerifyResponse,\n} from \"../types/verify\";\nimport { Chain, Transport, Account } from \"viem\";\n\n/**\n * Verifies a payment payload against the required payment details regardless of the scheme\n * this function wraps all verify functions for each specific scheme\n *\n * @param client - The public client used for blockchain interactions\n * @param payload - The signed payment payload containing transfer parameters and signature\n * @param paymentRequirements - The payment requirements that the payload must satisfy\n * @returns A ValidPaymentRequest indicating if the payment is valid and any invalidation reason\n */\nexport async function verify<\n  transport extends Transport,\n  chain extends Chain,\n  account extends Account | undefined,\n>(\n  client: ConnectedClient<transport, chain, account>,\n  payload: PaymentPayload,\n  paymentRequirements: PaymentRequirements,\n): Promise<VerifyResponse> {\n  if (\n    paymentRequirements.scheme == \"exact\" &&\n    SupportedEVMNetworks.includes(paymentRequirements.network)\n  ) {\n    const valid = await verifyExact(client, payload, paymentRequirements);\n    return valid;\n  }\n  return {\n    isValid: false,\n    invalidReason: \"invalid_scheme\",\n    payer: payload.payload.authorization.from,\n  };\n}\n\n/**\n * Settles a payment payload against the required payment details regardless of the scheme\n * this function wraps all settle functions for each specific scheme\n *\n * @param client - The signer wallet used for blockchain interactions\n * @param payload - The signed payment payload containing transfer parameters and signature\n * @param paymentRequirements - The payment requirements that the payload must satisfy\n * @returns A SettleResponse indicating if the payment is settled and any settlement reason\n */\nexport async function settle<transport extends Transport, chain extends Chain>(\n  client: SignerWallet<chain, transport>,\n  payload: PaymentPayload,\n  paymentRequirements: PaymentRequirements,\n): Promise<SettleResponse> {\n  if (\n    paymentRequirements.scheme == \"exact\" &&\n    SupportedEVMNetworks.includes(paymentRequirements.network)\n  ) {\n    return settleExact(client, payload, paymentRequirements);\n  }\n\n  return {\n    success: false,\n    errorReason: \"invalid_scheme\",\n    transaction: \"\",\n    network: paymentRequirements.network,\n    payer: payload.payload.authorization.from,\n  };\n}\n\nexport type Supported = {\n  x402Version: number;\n  kind: {\n    scheme: string;\n    networkId: string;\n  }[];\n};\n"],"mappings":";;;;;;;;;AAoBA,eAAsBA,QAKpB,QACA,SACA,qBACyB;AACzB,MACE,oBAAoB,UAAU,WAC9B,qBAAqB,SAAS,oBAAoB,OAAO,GACzD;AACA,UAAM,QAAQ,MAAM,OAAY,QAAQ,SAAS,mBAAmB;AACpE,WAAO;AAAA,EACT;AACA,SAAO;AAAA,IACL,SAAS;AAAA,IACT,eAAe;AAAA,IACf,OAAO,QAAQ,QAAQ,cAAc;AAAA,EACvC;AACF;AAWA,eAAsBC,QACpB,QACA,SACA,qBACyB;AACzB,MACE,oBAAoB,UAAU,WAC9B,qBAAqB,SAAS,oBAAoB,OAAO,GACzD;AACA,WAAO,OAAY,QAAQ,SAAS,mBAAmB;AAAA,EACzD;AAEA,SAAO;AAAA,IACL,SAAS;AAAA,IACT,aAAa;AAAA,IACb,aAAa;AAAA,IACb,SAAS,oBAAoB;AAAA,IAC7B,OAAO,QAAQ,QAAQ,cAAc;AAAA,EACvC;AACF;","names":["verify","settle"]}