import { Chain, Transport, Account, Client, RpcSchema, PublicActions, WalletActions, PublicClient, Hex } from 'viem';
import { baseSepolia } from 'viem/chains';

type SignerWallet<chain extends Chain = Chain, transport extends Transport = Transport, account extends Account = Account> = Client<transport, chain, account, RpcSchema, PublicActions<transport, chain, account> & WalletActions<chain, account>>;
type ConnectedClient<transport extends Transport = Transport, chain extends Chain | undefined = Chain, account extends Account | undefined = undefined> = PublicClient<transport, chain, account>;
/**
 * Creates a public client configured for the Base Sepolia testnet
 *
 * @returns A public client instance connected to Base Sepolia
 */
declare function createClientSepolia(): ConnectedClient<Transport, typeof baseSepolia, undefined>;
/**
 * Creates a wallet client configured for the Base Sepolia testnet with a private key
 *
 * @param privateKey - The private key to use for signing transactions
 * @returns A wallet client instance connected to Base Sepolia with the provided private key
 */
declare function createSignerSepolia(privateKey: Hex): SignerWallet<typeof baseSepolia>;

export { type ConnectedClient as C, type SignerWallet as S, createSignerSepolia as a, createClientSepolia as c };
